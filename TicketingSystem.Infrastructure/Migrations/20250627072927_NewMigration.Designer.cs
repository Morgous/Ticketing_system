// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketingSystem.Infrastructure.Context;

#nullable disable

namespace TicketingSystem.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250627072927_NewMigration")]
    partial class NewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1e8c82c-736f-4a6b-9f10-15d562ee5692"),
                            EventDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "My awesome Venue",
                            Title = "Awesome Rock Concert"
                        });
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PriceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e5a8b14-42bf-4b1c-9242-3fc0f57d1738"),
                            CartId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = new Guid("b1e8c82c-736f-4a6b-9f10-15d562ee5692"),
                            PriceId = new Guid("00000000-0000-0000-0000-000000000000"),
                            SeatId = new Guid("6d762474-a6c5-49a1-8461-4a93b2fe4c82"),
                            Status = "Booked",
                            UserId = new Guid("b0b79e20-0e5f-41b7-adc9-957847f06fe6"),
                            Version = 0
                        });
                });

            modelBuilder.Entity("Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efb2fbdc-5eb8-4390-ac51-225c30ac0b36"),
                            OrderId = new Guid("9e5a8b14-42bf-4b1c-9242-3fc0f57d1738"),
                            PaymentDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SectionId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a87980ba-e793-4d76-8b67-45c5273a2dde"),
                            EventId = new Guid("b1e8c82c-736f-4a6b-9f10-15d562ee5692"),
                            IsAvailable = false,
                            Row = "B",
                            SeatNumber = "3",
                            SectionId = new Guid("03dbdd25-660b-4980-a918-c8d918594d8e"),
                            Status = "Available",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("31f614f0-938a-4d0f-8945-ec288558e420"),
                            EventId = new Guid("b1e8c82c-736f-4a6b-9f10-15d562ee5692"),
                            IsAvailable = false,
                            Row = "B",
                            SeatNumber = "4",
                            SectionId = new Guid("03dbdd25-660b-4980-a918-c8d918594d8e"),
                            Status = "Available",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            EventId = new Guid("b1e8c82c-736f-4a6b-9f10-15d562ee5692"),
                            IsAvailable = true,
                            Row = "A",
                            SeatNumber = "1",
                            SectionId = new Guid("03dbdd25-660b-4980-a918-c8d918594d8e"),
                            Status = "Available",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            EventId = new Guid("b1e8c82c-736f-4a6b-9f10-15d562ee5692"),
                            IsAvailable = true,
                            Row = "A",
                            SeatNumber = "2",
                            SectionId = new Guid("03dbdd25-660b-4980-a918-c8d918594d8e"),
                            Status = "Available",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            EventId = new Guid("b1e8c82c-736f-4a6b-9f10-15d562ee5692"),
                            IsAvailable = true,
                            Row = "A",
                            SeatNumber = "3",
                            SectionId = new Guid("03dbdd25-660b-4980-a918-c8d918594d8e"),
                            Status = "Available",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            EventId = new Guid("b1e8c82c-736f-4a6b-9f10-15d562ee5692"),
                            IsAvailable = true,
                            Row = "A",
                            SeatNumber = "4",
                            SectionId = new Guid("03dbdd25-660b-4980-a918-c8d918594d8e"),
                            Status = "Available",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            EventId = new Guid("b1e8c82c-736f-4a6b-9f10-15d562ee5692"),
                            IsAvailable = true,
                            Row = "A",
                            SeatNumber = "5",
                            SectionId = new Guid("03dbdd25-660b-4980-a918-c8d918594d8e"),
                            Status = "Available",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            EventId = new Guid("b1e8c82c-736f-4a6b-9f10-15d562ee5692"),
                            IsAvailable = true,
                            Row = "A",
                            SeatNumber = "6",
                            SectionId = new Guid("03dbdd25-660b-4980-a918-c8d918594d8e"),
                            Status = "Available",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            EventId = new Guid("b1e8c82c-736f-4a6b-9f10-15d562ee5692"),
                            IsAvailable = true,
                            Row = "A",
                            SeatNumber = "7",
                            SectionId = new Guid("03dbdd25-660b-4980-a918-c8d918594d8e"),
                            Status = "Available",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            EventId = new Guid("b1e8c82c-736f-4a6b-9f10-15d562ee5692"),
                            IsAvailable = true,
                            Row = "A",
                            SeatNumber = "8",
                            SectionId = new Guid("03dbdd25-660b-4980-a918-c8d918594d8e"),
                            Status = "Available",
                            Version = 0
                        });
                });

            modelBuilder.Entity("Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03dbdd25-660b-4980-a918-c8d918594d8e"),
                            Name = "Some Section",
                            VenueId = new Guid("bb578f5f-836d-4767-8e98-58d0afbc3ff8")
                        },
                        new
                        {
                            Id = new Guid("ba39cf73-57c4-4f2e-a180-9d6c4ecb03bb"),
                            Name = "Some Other Section",
                            VenueId = new Guid("bb578f5f-836d-4767-8e98-58d0afbc3ff8")
                        });
                });

            modelBuilder.Entity("TicketingSystem.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0b79e20-0e5f-41b7-adc9-957847f06fe6"),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Jardani.Jovonovich@example.com",
                            FirstName = "Jardani",
                            LastName = "Jovonovich",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("061734a3-57c6-443b-a454-bc442c6feb34"),
                            DateOfBirth = new DateTime(1992, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Max.Payne@example.com",
                            FirstName = "Max",
                            LastName = "Payne",
                            PhoneNumber = "0987654321"
                        });
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("982ec780-25b9-481d-bbc5-bd5075ff5b7e"),
                            Amount = 150.00m,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = new Guid("9e5a8b14-42bf-4b1c-9242-3fc0f57d1738"),
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("UserSeatReservation", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "SeatId");

                    b.HasIndex("SeatId");

                    b.ToTable("UserSeatReservations");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b0b79e20-0e5f-41b7-adc9-957847f06fe6"),
                            SeatId = new Guid("a87980ba-e793-4d76-8b67-45c5273a2dde"),
                            ExpiresAt = new DateTime(2025, 6, 1, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            ReservedAt = new DateTime(2025, 6, 1, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("061734a3-57c6-443b-a454-bc442c6feb34"),
                            SeatId = new Guid("31f614f0-938a-4d0f-8945-ec288558e420"),
                            ExpiresAt = new DateTime(2025, 6, 2, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            ReservedAt = new DateTime(2025, 6, 2, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb578f5f-836d-4767-8e98-58d0afbc3ff8"),
                            Address = "Centralna Street 57",
                            Name = "My awesome Venue"
                        });
                });

            modelBuilder.Entity("Seat", b =>
                {
                    b.HasOne("Event", "Event")
                        .WithMany("Seats")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Section", "Section")
                        .WithMany("Seats")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Section", b =>
                {
                    b.HasOne("Venue", "Venue")
                        .WithMany("Sections")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("UserSeatReservation", b =>
                {
                    b.HasOne("Seat", "Seat")
                        .WithMany("SeatReservations")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingSystem.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Event", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Seat", b =>
                {
                    b.Navigation("SeatReservations");
                });

            modelBuilder.Entity("Section", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Venue", b =>
                {
                    b.Navigation("Sections");
                });
#pragma warning restore 612, 618
        }
    }
}
