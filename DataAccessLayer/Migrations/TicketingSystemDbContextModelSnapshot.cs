// <auto-generated />
using System;
using DataAccessLayer.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(TicketingSystemDbContext))]
    partial class TicketingSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SetupTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TeardownTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.EventSeat", b =>
                {
                    b.Property<int>("SeatId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("SeatId", "EventId");

                    b.HasIndex("EventId");

                    b.HasIndex("StatusId");

                    b.ToTable("EventSeats");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.EventSeatStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EventSeatStatuses");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.EventStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EventStatuses");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.EventVenue", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("EventId", "VenueId");

                    b.HasIndex("VenueId");

                    b.ToTable("EventVenues");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.SeatsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SeatsTypes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalNumberOfSeats")
                        .HasColumnType("int");

                    b.Property<int>("VenueTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VenueTypeId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.VenueRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("VenueRows");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.VenueSeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("RowId")
                        .HasColumnType("int");

                    b.Property<int>("SeatsTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RowId");

                    b.HasIndex("SeatsTypeId");

                    b.ToTable("VenueSeats");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.VenueSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("VenueSections");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.VenueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SeatsTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeatsTypeId");

                    b.ToTable("VenueTypes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Event", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.EventStatus", "Status")
                        .WithMany("Events")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.EventSeat", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Event", "Event")
                        .WithMany("EventSeats")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.VenueSeat", "Seat")
                        .WithMany("EventSeats")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.EventSeatStatus", "Status")
                        .WithMany("EventSeats")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Seat");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.EventVenue", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Event", "Event")
                        .WithMany("EventVenues")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Venue", "Venue")
                        .WithMany("EventVenues")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Venue", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.VenueType", "VenueType")
                        .WithMany("Venues")
                        .HasForeignKey("VenueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VenueType");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.VenueRow", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.VenueSection", "Section")
                        .WithMany("VenueRows")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.VenueSeat", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.VenueRow", "Row")
                        .WithMany("VenueSeats")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.SeatsType", "SeatsType")
                        .WithMany("VenueSeats")
                        .HasForeignKey("SeatsTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Row");

                    b.Navigation("SeatsType");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.VenueSection", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Venue", "Venue")
                        .WithMany("VenueSections")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.VenueType", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.SeatsType", "SeatsType")
                        .WithMany("VenueTypes")
                        .HasForeignKey("SeatsTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeatsType");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Event", b =>
                {
                    b.Navigation("EventSeats");

                    b.Navigation("EventVenues");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.EventSeatStatus", b =>
                {
                    b.Navigation("EventSeats");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.EventStatus", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.SeatsType", b =>
                {
                    b.Navigation("VenueSeats");

                    b.Navigation("VenueTypes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Venue", b =>
                {
                    b.Navigation("EventVenues");

                    b.Navigation("VenueSections");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.VenueRow", b =>
                {
                    b.Navigation("VenueSeats");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.VenueSeat", b =>
                {
                    b.Navigation("EventSeats");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.VenueSection", b =>
                {
                    b.Navigation("VenueRows");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.VenueType", b =>
                {
                    b.Navigation("Venues");
                });
#pragma warning restore 612, 618
        }
    }
}
